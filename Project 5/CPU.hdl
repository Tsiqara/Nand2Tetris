// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a=instruction, b=ALUout, sel=instruction[15], out=aRegInput);

    // load into a register if it is A instruction MSB=0, or is C instruction MSB=1 and dest[0] inst[5] is 1
    Not(in=instruction[15], out=aInstr);
    Or(a=aInstr, b=instruction[5], out=loadAreg);
    ARegister(in=aRegInput, load=loadAreg, out=aRegOut, out[0..14]=addressM);
    
    // C instructionâ€™s a-bit is control bit
    And(a=instruction[12], b=instruction[15], out=loadAluYinput);
    Mux16(a=aRegOut, b=inM, sel=loadAluYinput, out=aluYinput);
    ALU(x=dRegOut, y=aluYinput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

    // C instructions dest[1] bit
    And(a=instruction[4], b=instruction[15], out=loadDreg);
    DRegister(in=ALUout, load=loadDreg, out=dRegOut);

    // C instructions dest[2] bit
    And(a=instruction[3], b=instruction[15], out=writeM);

    //compute pc load 
    Or(a=ng, b=zr, out=lessOrEq0);
    Not(in=lessOrEq0, out=greater0);
    And(a=greater0, b=instruction[0], out=jgt);

    And(a=zr, b=instruction[1], out=jeq);

    And(a=ng, b=instruction[2], out=jlt);

    Or(a=jgt, b=jeq, out=jge);
    Or(a=jge, b=jlt, out=jump);
    And(a=jump, b=instruction[15], out=pcLoad, out=noInc);

    // if not jump inc pc
    Not(in=noInc, out=pcInc);

    PC(in=aRegOut, load=pcLoad, inc=pcInc, reset=reset, out[0..14]=pc);
}